import 'package:json_annotation/json_annotation.dart';

part 'deepseek_models.g.dart';

/// Represents a message in the Deepseek chat API
///
/// Contains the content of the message, optional reasoning content,
/// tool calls that may be invoked, and the role of the message sender.
@JsonSerializable(fieldRename: FieldRename.snake)
class DeepseekMessage {
  /// The main content of the message
  final String content;
  
  /// Optional reasoning content that explains the thought process
  final String? reasoningContent;
  
  /// Optional tool calls that can be invoked by the model
  final List<DeepseekToolCall>? toolCalls;
  
  /// The role of the message sender (e.g., "user", "assistant")
  final String role;

  /// Creates a new DeepseekMessage instance
  DeepseekMessage({
    required this.content,
    this.reasoningContent,
    this.toolCalls,
    required this.role,
  });

  /// Creates a DeepseekMessage from JSON
  factory DeepseekMessage.fromJson(Map<String, dynamic> json) =>
      _$DeepseekMessageFromJson(json);

  /// Converts this DeepseekMessage to JSON
  Map<String, dynamic> toJson() => _$DeepseekMessageToJson(this);
}

/// Represents a request to the Deepseek chat API
///
/// Contains the messages to be sent, the model to use, and various
/// parameters that control the generation behavior.
@JsonSerializable(fieldRename: FieldRename.snake)
class DeepseekChatRequest {
  /// The list of messages in the conversation
  final List<DeepseekMessage> messages;
  
  /// The model identifier to use for generation
  final String model;
  
  /// Controls randomness: higher values make output more random
  final double? temperature;
  
  /// The maximum number of tokens to generate
  final int? maxTokens;
  
  /// Nucleus sampling parameter, alternative to temperature
  final double? topP;
  
  /// Penalizes repeated tokens
  final double? frequencyPenalty;
  
  /// Penalizes new tokens based on their presence in the text so far
  final double? presencePenalty;
  
  /// Whether to stream the response
  final bool? stream;
  
  /// Format specifications for the response
  final Map<String, dynamic>? responseFormat;

  /// Creates a new DeepseekChatRequest instance
  DeepseekChatRequest({
    required this.messages,
    required this.model,
    this.temperature,
    this.maxTokens,
    this.topP,
    this.frequencyPenalty,
    this.presencePenalty,
    this.stream,
    this.responseFormat,
  });

  /// Creates a DeepseekChatRequest from JSON
  factory DeepseekChatRequest.fromJson(Map<String, dynamic> json) =>
      _$DeepseekChatRequestFromJson(json);

  /// Converts this DeepseekChatRequest to JSON
  Map<String, dynamic> toJson() => _$DeepseekChatRequestToJson(this);
}

/// Represents a choice in the Deepseek chat API response
///
/// Contains the message generated by the model, the reason why generation
/// finished, and other metadata.
@JsonSerializable(fieldRename: FieldRename.snake)
class DeepseekChoice {
  /// The reason why generation finished (e.g., "stop", "length")
  final String? finishReason;
  
  /// The index of this choice in the list of choices
  final int index;
  
  /// The message generated by the model
  final DeepseekMessage message;
  
  /// Log probabilities for the generated tokens
  final DeepseekLogprobs? logprobs;

  /// Creates a new DeepseekChoice instance
  DeepseekChoice({
    this.finishReason,
    required this.index,
    required this.message,
    this.logprobs,
  });

  /// Creates a DeepseekChoice from JSON
  factory DeepseekChoice.fromJson(Map<String, dynamic> json) =>
      _$DeepseekChoiceFromJson(json);

  /// Converts this DeepseekChoice to JSON
  Map<String, dynamic> toJson() => _$DeepseekChoiceToJson(this);
}

/// Represents usage statistics for a Deepseek API request
///
/// Contains information about token usage for both prompt and completion.
@JsonSerializable(fieldRename: FieldRename.snake)
class DeepseekUsage {
  /// Number of tokens in the completion
  final int completionTokens;
  
  /// Number of tokens in the prompt
  final int promptTokens;
  
  /// Number of prompt tokens that were cached
  final int? promptCacheHitTokens;
  
  /// Number of prompt tokens that were not cached
  final int? promptCacheMissTokens;
  
  /// Total number of tokens used
  final int totalTokens;
  
  /// Detailed breakdown of completion tokens
  final DeepseekCompletionTokensDetails? completionTokensDetails;
  
  /// Detailed breakdown of prompt tokens
  final DeepseekPromptTokensDetails? promptTokensDetails;

  /// Creates a new DeepseekUsage instance
  DeepseekUsage({
    required this.completionTokens,
    required this.promptTokens,
    this.promptCacheHitTokens,
    this.promptCacheMissTokens,
    required this.totalTokens,
    this.completionTokensDetails,
    this.promptTokensDetails,
  });

  /// Creates a DeepseekUsage from JSON
  factory DeepseekUsage.fromJson(Map<String, dynamic> json) =>
      _$DeepseekUsageFromJson(json);

  /// Converts this DeepseekUsage to JSON
  Map<String, dynamic> toJson() => _$DeepseekUsageToJson(this);
}

/// Represents details about prompt tokens in a Deepseek API request
///
/// Contains information about cached tokens.
@JsonSerializable(fieldRename: FieldRename.snake)
class DeepseekPromptTokensDetails {
  /// Number of tokens that were cached
  final int? cachedTokens;

  /// Creates a new DeepseekPromptTokensDetails instance
  DeepseekPromptTokensDetails({
    this.cachedTokens,
  });

  /// Creates a DeepseekPromptTokensDetails from JSON
  factory DeepseekPromptTokensDetails.fromJson(Map<String, dynamic> json) =>
      _$DeepseekPromptTokensDetailsFromJson(json);

  /// Converts this DeepseekPromptTokensDetails to JSON
  Map<String, dynamic> toJson() => _$DeepseekPromptTokensDetailsToJson(this);
}

/// Represents a response from the Deepseek chat API
///
/// Contains the generated choices, usage statistics, and other metadata.
@JsonSerializable(fieldRename: FieldRename.snake)
class DeepseekChatResponse {
  /// The unique identifier for this response
  final String id;
  
  /// The list of generated choices
  final List<DeepseekChoice> choices;
  
  /// The timestamp when the response was created
  final int created;
  
  /// The model used to generate the response
  final String model;
  
  /// The system fingerprint
  final String? systemFingerprint;
  
  /// The object type (typically "chat.completion")
  final String object;
  
  /// Usage statistics for this request
  final DeepseekUsage usage;

  /// Convenience getter for the first message in the response
  DeepseekMessage get firstMessage => choices.first.message;

  /// Creates a new DeepseekChatResponse instance
  DeepseekChatResponse({
    required this.id,
    required this.choices,
    required this.created,
    required this.model,
    this.systemFingerprint,
    required this.object,
    required this.usage,
  });

  /// Creates a DeepseekChatResponse from JSON
  factory DeepseekChatResponse.fromJson(Map<String, dynamic> json) =>
      _$DeepseekChatResponseFromJson(json);

  /// Converts this DeepseekChatResponse to JSON
  Map<String, dynamic> toJson() => _$DeepseekChatResponseToJson(this);
}

/// Represents a tool call in the Deepseek chat API
///
/// Contains information about a function that can be called by the model.
@JsonSerializable(fieldRename: FieldRename.snake)
class DeepseekToolCall {
  /// The unique identifier for this tool call
  final String id;
  
  /// The type of tool call (typically "function")
  final String type;
  
  /// The function to be called
  final DeepseekFunction function;

  /// Creates a new DeepseekToolCall instance
  DeepseekToolCall({
    required this.id,
    required this.type,
    required this.function,
  });

  /// Creates a DeepseekToolCall from JSON
  factory DeepseekToolCall.fromJson(Map<String, dynamic> json) =>
      _$DeepseekToolCallFromJson(json);

  /// Converts this DeepseekToolCall to JSON
  Map<String, dynamic> toJson() => _$DeepseekToolCallToJson(this);
}

/// Represents a function in the Deepseek chat API
///
/// Contains the name of the function and its arguments.
@JsonSerializable(fieldRename: FieldRename.snake)
class DeepseekFunction {
  /// The name of the function
  final String name;
  
  /// The arguments to the function, as a JSON string
  final String arguments;

  /// Creates a new DeepseekFunction instance
  DeepseekFunction({
    required this.name,
    required this.arguments,
  });

  /// Creates a DeepseekFunction from JSON
  factory DeepseekFunction.fromJson(Map<String, dynamic> json) =>
      _$DeepseekFunctionFromJson(json);

  /// Converts this DeepseekFunction to JSON
  Map<String, dynamic> toJson() => _$DeepseekFunctionToJson(this);
}

/// Represents the content of a log probability in the Deepseek chat API
///
/// Contains information about a token and its log probability.
@JsonSerializable(fieldRename: FieldRename.snake)
class DeepseekLogprobContent {
  /// The token string
  final String token;
  
  /// The log probability of the token
  final double logprob;
  
  /// The bytes representation of the token
  final List<int>? bytes;
  
  /// The top alternative tokens and their log probabilities
  final List<DeepseekTopLogprob> topLogprobs;

  /// Creates a new DeepseekLogprobContent instance
  DeepseekLogprobContent({
    required this.token,
    required this.logprob,
    this.bytes,
    required this.topLogprobs,
  });

  /// Creates a DeepseekLogprobContent from JSON
  factory DeepseekLogprobContent.fromJson(Map<String, dynamic> json) =>
      _$DeepseekLogprobContentFromJson(json);

  /// Converts this DeepseekLogprobContent to JSON
  Map<String, dynamic> toJson() => _$DeepseekLogprobContentToJson(this);
}

/// Represents a top log probability in the Deepseek chat API
///
/// Contains information about an alternative token and its log probability.
@JsonSerializable(fieldRename: FieldRename.snake)
class DeepseekTopLogprob {
  /// The token string
  final String token;
  
  /// The log probability of the token
  final double logprob;
  
  /// The bytes representation of the token
  final List<int>? bytes;

  /// Creates a new DeepseekTopLogprob instance
  DeepseekTopLogprob({
    required this.token,
    required this.logprob,
    this.bytes,
  });

  /// Creates a DeepseekTopLogprob from JSON
  factory DeepseekTopLogprob.fromJson(Map<String, dynamic> json) =>
      _$DeepseekTopLogprobFromJson(json);

  /// Converts this DeepseekTopLogprob to JSON
  Map<String, dynamic> toJson() => _$DeepseekTopLogprobToJson(this);
}

/// Represents log probabilities in the Deepseek chat API
///
/// Contains a list of log probability contents.
@JsonSerializable(fieldRename: FieldRename.snake)
class DeepseekLogprobs {
  /// The list of log probability contents
  final List<DeepseekLogprobContent> content;

  /// Creates a new DeepseekLogprobs instance
  DeepseekLogprobs({
    required this.content,
  });

  /// Creates a DeepseekLogprobs from JSON
  factory DeepseekLogprobs.fromJson(Map<String, dynamic> json) =>
      _$DeepseekLogprobsFromJson(json);

  /// Converts this DeepseekLogprobs to JSON
  Map<String, dynamic> toJson() => _$DeepseekLogprobsToJson(this);
}

/// Represents details about completion tokens in a Deepseek API request
///
/// Contains information about reasoning tokens.
@JsonSerializable(fieldRename: FieldRename.snake)
class DeepseekCompletionTokensDetails {
  /// Number of tokens used for reasoning
  final int? reasoningTokens;

  /// Creates a new DeepseekCompletionTokensDetails instance
  DeepseekCompletionTokensDetails({
    this.reasoningTokens,
  });

  /// Creates a DeepseekCompletionTokensDetails from JSON
  factory DeepseekCompletionTokensDetails.fromJson(Map<String, dynamic> json) =>
      _$DeepseekCompletionTokensDetailsFromJson(json);

  /// Converts this DeepseekCompletionTokensDetails to JSON
  Map<String, dynamic> toJson() =>
      _$DeepseekCompletionTokensDetailsToJson(this);
}
